version: 2

defaults: &setup
  working_directory: ~/symfony-circleci
  docker:
    - image: vouchedfor/symfony-base

defaults: &tests
  working_directory: ~/symfony-circleci
  docker:
    - image: circleci/php:7.0-fpm-browsers
#      auth:
#        username: $DOCKER_USER
#        password: $DOCKER_PASS
      environment:
        DB_NAME: symfonydemo
        DB_USER: root
        DB_PASSWORD: root
        DB_PORT: 3306
        DB_HOST: 127.0.0.1
    - image: vouchedfor/main-db-sanitized-prod:latest
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASS

jobs:

  setup:
#    <<: *setup
    <<: *tests
    parallelism: 1
    steps:
      - checkout

      - run:
          name: Install mysql client
          command: |
            sudo apt-get update
            sudo apt-get install -y mysql-client

      - run:
          name: Install php mysql extension
          command: |
            sudo docker-php-ext-install pdo_mysql

      - run:
          name: Run composer self-update
          command: sudo composer self-update

      - restore_cache:
          keys:
            - v1-vendors-{{ checksum "composer.json" }}
            - v1-vendors-

      - run:
          name: Run composer install
          command: composer install -n --prefer-dist

      - save_cache:
          key: composer-v1-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      - run:
          name: Copy parameters.yml
          command: cp .circleci/parameters.yml.dist app/config/parameters.yml

      - run:
          name: Check if symfony is ok
          command: php bin/symfony_requirements

      - run:
          name: Check php modules
          command: php -m

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run:
          name: Check mysql connection
          command: mysql -uroot -proot -h127.0.0.1 -P3306 --protocol=TCP verity -e "show tables;"

      - run:
          name: See hosts
          command: cat /etc/hosts

      - run:
          name: Create database
          command: php bin/console -n doctrine:database:create

      - run:
          name: Run migrations
          command: php bin/console -n doctrine:migrations:migrate

#      # Persist project data
#      - persist_to_workspace:
#          root: ~/
#          paths:
#            - symfony-circleci
#            - .ssh

  tests:
    <<: *tests
    parallelism: 1
    steps:
      - attach_workspace:
          at: ~/

      - run:
          name: Wait for db
          command: dockerize -wait tcp://db:3306 -timeout 1m

      - run:
          name: Install mysql client
          command: |
            sudo apt-get update
            sudo apt-get install -y mysql-client

      - run:
          name: Install php mysql extension
          command: |
            sudo docker-php-ext-install pdo_mysql

      - run:
          name: Db test
          command: mysql -u $DB_USER -p$DB_PASSWORD -h$DB_HOST financial_plan -e "show tables;"

      - run:
          name: Run migrations
          command: php bin/console -n doctrine:database:create

      - run:
          name: Run migrations
          command: php bin/console -n doctrine:migrations:migrate

      - run:
          name: Run phpunit tests
          command: vendor/phpunit/phpunit/phpunit

  build:
    <<: *setup
    parallelism: 1
    steps:
      - attach_workspace:
          at: ~/

      - setup_remote_docker

      - run:
          name: Build  docker image
          command: |
            docker build -t sorinsugar/simfony-circleci:$CIRCLE_SHA1
            docker tag -f sorinsugar/simfony-circleci:$CIRCLE_SHA1 sorinsugar/simfony-circleci:latest

      - run:
          name: Push  docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push sorinsugar/simfony-circleci:$CIRCLE_SHA1

workflows:
  version: 2
  build-and-test:
    jobs:
      - setup:
          filters:
            branches:
              only:
                - /.*/
#      - tests:
#          requires:
#            - setup
#          filters:
#            branches:
#              only:
#                - /.*/
#      - build:
#          requires:
#            - tests
#          filters:
#            branches:
#              only:
#                - /master/
